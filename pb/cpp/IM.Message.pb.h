// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto

#ifndef PROTOBUF_IM_2eMessage_2eproto__INCLUDED
#define PROTOBUF_IM_2eMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eMessage_2eproto();
void protobuf_AssignDesc_IM_2eMessage_2eproto();
void protobuf_ShutdownFile_IM_2eMessage_2eproto();

class IMMsgData;
class IMMsgDataAck;
class IMMsgDataReadAck;
class IMMsgDataReadNotify;
class IMClientTimeReq;
class IMClientTimeRsp;
class IMUnreadMsgCntReq;
class IMUnreadMsgCntRsp;
class IMGetMsgListReq;
class IMGetMsgListRsp;
class IMGetLatestMsgIdReq;
class IMGetLatestMsgIdRsp;
class IMGetMsgByIdReq;
class IMGetMsgByIdRsp;

// ===================================================================

class IMMsgData : public ::google::protobuf::MessageLite {
 public:
  IMMsgData();
  virtual ~IMMsgData();
  
  IMMsgData(const IMMsgData& from);
  
  inline IMMsgData& operator=(const IMMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMMsgData& default_instance();
  
  void Swap(IMMsgData* other);
  
  // implements Message ----------------------------------------------
  
  IMMsgData* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgData& from);
  void MergeFrom(const IMMsgData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);
  
  // required uint32 to_session_id = 2;
  inline bool has_to_session_id() const;
  inline void clear_to_session_id();
  static const int kToSessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_session_id() const;
  inline void set_to_session_id(::google::protobuf::uint32 value);
  
  // required uint32 msg_id = 3;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);
  
  // required uint32 create_time = 4;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.MsgType msg_type = 5;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 5;
  inline IM::BaseDefine::MsgType msg_type() const;
  inline void set_msg_type(IM::BaseDefine::MsgType value);
  
  // required bytes msg_data = 6;
  inline bool has_msg_data() const;
  inline void clear_msg_data();
  static const int kMsgDataFieldNumber = 6;
  inline const ::std::string& msg_data() const;
  inline void set_msg_data(const ::std::string& value);
  inline void set_msg_data(const char* value);
  inline void set_msg_data(const void* value, size_t size);
  inline ::std::string* mutable_msg_data();
  inline ::std::string* release_msg_data();
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgData)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_session_id();
  inline void clear_has_to_session_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_msg_data();
  inline void clear_has_msg_data();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_session_id_;
  ::google::protobuf::uint32 msg_id_;
  ::google::protobuf::uint32 create_time_;
  ::std::string* msg_data_;
  ::std::string* attach_data_;
  int msg_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMMsgData* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgDataAck : public ::google::protobuf::MessageLite {
 public:
  IMMsgDataAck();
  virtual ~IMMsgDataAck();
  
  IMMsgDataAck(const IMMsgDataAck& from);
  
  inline IMMsgDataAck& operator=(const IMMsgDataAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMMsgDataAck& default_instance();
  
  void Swap(IMMsgDataAck* other);
  
  // implements Message ----------------------------------------------
  
  IMMsgDataAck* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgDataAck& from);
  void MergeFrom(const IMMsgDataAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required uint32 session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // required uint32 msg_id = 3;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 4;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 4;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgDataAck)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 msg_id_;
  int session_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMMsgDataAck* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgDataReadAck : public ::google::protobuf::MessageLite {
 public:
  IMMsgDataReadAck();
  virtual ~IMMsgDataReadAck();
  
  IMMsgDataReadAck(const IMMsgDataReadAck& from);
  
  inline IMMsgDataReadAck& operator=(const IMMsgDataReadAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMMsgDataReadAck& default_instance();
  
  void Swap(IMMsgDataReadAck* other);
  
  // implements Message ----------------------------------------------
  
  IMMsgDataReadAck* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgDataReadAck& from);
  void MergeFrom(const IMMsgDataReadAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required uint32 session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // required uint32 msg_id = 3;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 4;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 4;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgDataReadAck)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 msg_id_;
  int session_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMMsgDataReadAck* default_instance_;
};
// -------------------------------------------------------------------

class IMMsgDataReadNotify : public ::google::protobuf::MessageLite {
 public:
  IMMsgDataReadNotify();
  virtual ~IMMsgDataReadNotify();
  
  IMMsgDataReadNotify(const IMMsgDataReadNotify& from);
  
  inline IMMsgDataReadNotify& operator=(const IMMsgDataReadNotify& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMMsgDataReadNotify& default_instance();
  
  void Swap(IMMsgDataReadNotify* other);
  
  // implements Message ----------------------------------------------
  
  IMMsgDataReadNotify* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMMsgDataReadNotify& from);
  void MergeFrom(const IMMsgDataReadNotify& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required uint32 session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // required uint32 msg_id = 3;
  inline bool has_msg_id() const;
  inline void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_id() const;
  inline void set_msg_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 4;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 4;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMMsgDataReadNotify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 msg_id_;
  int session_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMMsgDataReadNotify* default_instance_;
};
// -------------------------------------------------------------------

class IMClientTimeReq : public ::google::protobuf::MessageLite {
 public:
  IMClientTimeReq();
  virtual ~IMClientTimeReq();
  
  IMClientTimeReq(const IMClientTimeReq& from);
  
  inline IMClientTimeReq& operator=(const IMClientTimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMClientTimeReq& default_instance();
  
  void Swap(IMClientTimeReq* other);
  
  // implements Message ----------------------------------------------
  
  IMClientTimeReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMClientTimeReq& from);
  void MergeFrom(const IMClientTimeReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMClientTimeReq)
 private:
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMClientTimeReq* default_instance_;
};
// -------------------------------------------------------------------

class IMClientTimeRsp : public ::google::protobuf::MessageLite {
 public:
  IMClientTimeRsp();
  virtual ~IMClientTimeRsp();
  
  IMClientTimeRsp(const IMClientTimeRsp& from);
  
  inline IMClientTimeRsp& operator=(const IMClientTimeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMClientTimeRsp& default_instance();
  
  void Swap(IMClientTimeRsp* other);
  
  // implements Message ----------------------------------------------
  
  IMClientTimeRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMClientTimeRsp& from);
  void MergeFrom(const IMClientTimeRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 server_time = 1;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 server_time() const;
  inline void set_server_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMClientTimeRsp)
 private:
  inline void set_has_server_time();
  inline void clear_has_server_time();
  
  ::google::protobuf::uint32 server_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMClientTimeRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMUnreadMsgCntReq : public ::google::protobuf::MessageLite {
 public:
  IMUnreadMsgCntReq();
  virtual ~IMUnreadMsgCntReq();
  
  IMUnreadMsgCntReq(const IMUnreadMsgCntReq& from);
  
  inline IMUnreadMsgCntReq& operator=(const IMUnreadMsgCntReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMUnreadMsgCntReq& default_instance();
  
  void Swap(IMUnreadMsgCntReq* other);
  
  // implements Message ----------------------------------------------
  
  IMUnreadMsgCntReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUnreadMsgCntReq& from);
  void MergeFrom(const IMUnreadMsgCntReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMUnreadMsgCntReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMUnreadMsgCntReq* default_instance_;
};
// -------------------------------------------------------------------

class IMUnreadMsgCntRsp : public ::google::protobuf::MessageLite {
 public:
  IMUnreadMsgCntRsp();
  virtual ~IMUnreadMsgCntRsp();
  
  IMUnreadMsgCntRsp(const IMUnreadMsgCntRsp& from);
  
  inline IMUnreadMsgCntRsp& operator=(const IMUnreadMsgCntRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMUnreadMsgCntRsp& default_instance();
  
  void Swap(IMUnreadMsgCntRsp* other);
  
  // implements Message ----------------------------------------------
  
  IMUnreadMsgCntRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMUnreadMsgCntRsp& from);
  void MergeFrom(const IMUnreadMsgCntRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required uint32 total_cnt = 2;
  inline bool has_total_cnt() const;
  inline void clear_total_cnt();
  static const int kTotalCntFieldNumber = 2;
  inline ::google::protobuf::uint32 total_cnt() const;
  inline void set_total_cnt(::google::protobuf::uint32 value);
  
  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  inline int unreadinfo_list_size() const;
  inline void clear_unreadinfo_list();
  static const int kUnreadinfoListFieldNumber = 3;
  inline const ::IM::BaseDefine::UnreadInfo& unreadinfo_list(int index) const;
  inline ::IM::BaseDefine::UnreadInfo* mutable_unreadinfo_list(int index);
  inline ::IM::BaseDefine::UnreadInfo* add_unreadinfo_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >&
      unreadinfo_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >*
      mutable_unreadinfo_list();
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMUnreadMsgCntRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_total_cnt();
  inline void clear_has_total_cnt();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 total_cnt_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo > unreadinfo_list_;
  ::std::string* attach_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMUnreadMsgCntRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGetMsgListReq : public ::google::protobuf::MessageLite {
 public:
  IMGetMsgListReq();
  virtual ~IMGetMsgListReq();
  
  IMGetMsgListReq(const IMGetMsgListReq& from);
  
  inline IMGetMsgListReq& operator=(const IMGetMsgListReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMGetMsgListReq& default_instance();
  
  void Swap(IMGetMsgListReq* other);
  
  // implements Message ----------------------------------------------
  
  IMGetMsgListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetMsgListReq& from);
  void MergeFrom(const IMGetMsgListReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // required uint32 msg_id_begin = 4;
  inline bool has_msg_id_begin() const;
  inline void clear_msg_id_begin();
  static const int kMsgIdBeginFieldNumber = 4;
  inline ::google::protobuf::uint32 msg_id_begin() const;
  inline void set_msg_id_begin(::google::protobuf::uint32 value);
  
  // required uint32 msg_cnt = 5;
  inline bool has_msg_cnt() const;
  inline void clear_msg_cnt();
  static const int kMsgCntFieldNumber = 5;
  inline ::google::protobuf::uint32 msg_cnt() const;
  inline void set_msg_cnt(::google::protobuf::uint32 value);
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMGetMsgListReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_msg_id_begin();
  inline void clear_has_msg_id_begin();
  inline void set_has_msg_cnt();
  inline void clear_has_msg_cnt();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 msg_id_begin_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 msg_cnt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMGetMsgListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGetMsgListRsp : public ::google::protobuf::MessageLite {
 public:
  IMGetMsgListRsp();
  virtual ~IMGetMsgListRsp();
  
  IMGetMsgListRsp(const IMGetMsgListRsp& from);
  
  inline IMGetMsgListRsp& operator=(const IMGetMsgListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMGetMsgListRsp& default_instance();
  
  void Swap(IMGetMsgListRsp* other);
  
  // implements Message ----------------------------------------------
  
  IMGetMsgListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetMsgListRsp& from);
  void MergeFrom(const IMGetMsgListRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // required uint32 msg_id_begin = 4;
  inline bool has_msg_id_begin() const;
  inline void clear_msg_id_begin();
  static const int kMsgIdBeginFieldNumber = 4;
  inline ::google::protobuf::uint32 msg_id_begin() const;
  inline void set_msg_id_begin(::google::protobuf::uint32 value);
  
  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  inline int msg_list_size() const;
  inline void clear_msg_list();
  static const int kMsgListFieldNumber = 5;
  inline const ::IM::BaseDefine::MsgInfo& msg_list(int index) const;
  inline ::IM::BaseDefine::MsgInfo* mutable_msg_list(int index);
  inline ::IM::BaseDefine::MsgInfo* add_msg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
      msg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
      mutable_msg_list();
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMGetMsgListRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_msg_id_begin();
  inline void clear_has_msg_id_begin();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 msg_id_begin_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo > msg_list_;
  ::std::string* attach_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMGetMsgListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGetLatestMsgIdReq : public ::google::protobuf::MessageLite {
 public:
  IMGetLatestMsgIdReq();
  virtual ~IMGetLatestMsgIdReq();
  
  IMGetLatestMsgIdReq(const IMGetLatestMsgIdReq& from);
  
  inline IMGetLatestMsgIdReq& operator=(const IMGetLatestMsgIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMGetLatestMsgIdReq& default_instance();
  
  void Swap(IMGetLatestMsgIdReq* other);
  
  // implements Message ----------------------------------------------
  
  IMGetLatestMsgIdReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetLatestMsgIdReq& from);
  void MergeFrom(const IMGetLatestMsgIdReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMGetLatestMsgIdReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 session_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMGetLatestMsgIdReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGetLatestMsgIdRsp : public ::google::protobuf::MessageLite {
 public:
  IMGetLatestMsgIdRsp();
  virtual ~IMGetLatestMsgIdRsp();
  
  IMGetLatestMsgIdRsp(const IMGetLatestMsgIdRsp& from);
  
  inline IMGetLatestMsgIdRsp& operator=(const IMGetLatestMsgIdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMGetLatestMsgIdRsp& default_instance();
  
  void Swap(IMGetLatestMsgIdRsp* other);
  
  // implements Message ----------------------------------------------
  
  IMGetLatestMsgIdRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetLatestMsgIdRsp& from);
  void MergeFrom(const IMGetLatestMsgIdRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // required uint32 latest_msg_id = 4;
  inline bool has_latest_msg_id() const;
  inline void clear_latest_msg_id();
  static const int kLatestMsgIdFieldNumber = 4;
  inline ::google::protobuf::uint32 latest_msg_id() const;
  inline void set_latest_msg_id(::google::protobuf::uint32 value);
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMGetLatestMsgIdRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_latest_msg_id();
  inline void clear_has_latest_msg_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::google::protobuf::uint32 session_id_;
  ::google::protobuf::uint32 latest_msg_id_;
  ::std::string* attach_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMGetLatestMsgIdRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMGetMsgByIdReq : public ::google::protobuf::MessageLite {
 public:
  IMGetMsgByIdReq();
  virtual ~IMGetMsgByIdReq();
  
  IMGetMsgByIdReq(const IMGetMsgByIdReq& from);
  
  inline IMGetMsgByIdReq& operator=(const IMGetMsgByIdReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMGetMsgByIdReq& default_instance();
  
  void Swap(IMGetMsgByIdReq* other);
  
  // implements Message ----------------------------------------------
  
  IMGetMsgByIdReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetMsgByIdReq& from);
  void MergeFrom(const IMGetMsgByIdReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // repeated uint32 msg_id_list = 4;
  inline int msg_id_list_size() const;
  inline void clear_msg_id_list();
  static const int kMsgIdListFieldNumber = 4;
  inline ::google::protobuf::uint32 msg_id_list(int index) const;
  inline void set_msg_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_msg_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      msg_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_msg_id_list();
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMGetMsgByIdReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > msg_id_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 session_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMGetMsgByIdReq* default_instance_;
};
// -------------------------------------------------------------------

class IMGetMsgByIdRsp : public ::google::protobuf::MessageLite {
 public:
  IMGetMsgByIdRsp();
  virtual ~IMGetMsgByIdRsp();
  
  IMGetMsgByIdRsp(const IMGetMsgByIdRsp& from);
  
  inline IMGetMsgByIdRsp& operator=(const IMGetMsgByIdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMGetMsgByIdRsp& default_instance();
  
  void Swap(IMGetMsgByIdRsp* other);
  
  // implements Message ----------------------------------------------
  
  IMGetMsgByIdRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMGetMsgByIdRsp& from);
  void MergeFrom(const IMGetMsgByIdRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // required .IM.BaseDefine.SessionType session_type = 2;
  inline bool has_session_type() const;
  inline void clear_session_type();
  static const int kSessionTypeFieldNumber = 2;
  inline IM::BaseDefine::SessionType session_type() const;
  inline void set_session_type(IM::BaseDefine::SessionType value);
  
  // required uint32 session_id = 3;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 session_id() const;
  inline void set_session_id(::google::protobuf::uint32 value);
  
  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  inline int msg_list_size() const;
  inline void clear_msg_list();
  static const int kMsgListFieldNumber = 4;
  inline const ::IM::BaseDefine::MsgInfo& msg_list(int index) const;
  inline ::IM::BaseDefine::MsgInfo* mutable_msg_list(int index);
  inline ::IM::BaseDefine::MsgInfo* add_msg_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
      msg_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
      mutable_msg_list();
  
  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  
  // @@protoc_insertion_point(class_scope:IM.Message.IMGetMsgByIdRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_type();
  inline void clear_has_session_type();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();
  
  ::google::protobuf::uint32 user_id_;
  int session_type_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo > msg_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 session_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eMessage_2eproto();
  friend void protobuf_AssignDesc_IM_2eMessage_2eproto();
  friend void protobuf_ShutdownFile_IM_2eMessage_2eproto();
  
  void InitAsDefaultInstance();
  static IMGetMsgByIdRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMMsgData

// required uint32 from_user_id = 1;
inline bool IMMsgData::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgData::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgData::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgData::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMMsgData::from_user_id() const {
  return from_user_id_;
}
inline void IMMsgData::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
}

// required uint32 to_session_id = 2;
inline bool IMMsgData::has_to_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgData::set_has_to_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgData::clear_has_to_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgData::clear_to_session_id() {
  to_session_id_ = 0u;
  clear_has_to_session_id();
}
inline ::google::protobuf::uint32 IMMsgData::to_session_id() const {
  return to_session_id_;
}
inline void IMMsgData::set_to_session_id(::google::protobuf::uint32 value) {
  set_has_to_session_id();
  to_session_id_ = value;
}

// required uint32 msg_id = 3;
inline bool IMMsgData::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgData::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgData::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgData::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMMsgData::msg_id() const {
  return msg_id_;
}
inline void IMMsgData::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// required uint32 create_time = 4;
inline bool IMMsgData::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgData::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgData::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgData::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 IMMsgData::create_time() const {
  return create_time_;
}
inline void IMMsgData::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// required .IM.BaseDefine.MsgType msg_type = 5;
inline bool IMMsgData::has_msg_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMMsgData::set_has_msg_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMMsgData::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMMsgData::clear_msg_type() {
  msg_type_ = 1;
  clear_has_msg_type();
}
inline IM::BaseDefine::MsgType IMMsgData::msg_type() const {
  return static_cast< IM::BaseDefine::MsgType >(msg_type_);
}
inline void IMMsgData::set_msg_type(IM::BaseDefine::MsgType value) {
  GOOGLE_DCHECK(IM::BaseDefine::MsgType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
}

// required bytes msg_data = 6;
inline bool IMMsgData::has_msg_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMMsgData::set_has_msg_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMMsgData::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMMsgData::clear_msg_data() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    msg_data_->clear();
  }
  clear_has_msg_data();
}
inline const ::std::string& IMMsgData::msg_data() const {
  return *msg_data_;
}
inline void IMMsgData::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void IMMsgData::set_msg_data(const char* value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void IMMsgData::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMMsgData::mutable_msg_data() {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  return msg_data_;
}
inline ::std::string* IMMsgData::release_msg_data() {
  clear_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_data_;
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes attach_data = 20;
inline bool IMMsgData::has_attach_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMMsgData::set_has_attach_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMMsgData::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMMsgData::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMMsgData::attach_data() const {
  return *attach_data_;
}
inline void IMMsgData::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMMsgData::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMMsgData::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMMsgData::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMMsgData::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IMMsgDataAck

// required uint32 user_id = 1;
inline bool IMMsgDataAck::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgDataAck::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgDataAck::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgDataAck::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMMsgDataAck::user_id() const {
  return user_id_;
}
inline void IMMsgDataAck::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 session_id = 2;
inline bool IMMsgDataAck::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgDataAck::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgDataAck::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgDataAck::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMMsgDataAck::session_id() const {
  return session_id_;
}
inline void IMMsgDataAck::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required uint32 msg_id = 3;
inline bool IMMsgDataAck::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgDataAck::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgDataAck::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgDataAck::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMMsgDataAck::msg_id() const {
  return msg_id_;
}
inline void IMMsgDataAck::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 4;
inline bool IMMsgDataAck::has_session_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgDataAck::set_has_session_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgDataAck::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgDataAck::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMMsgDataAck::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMMsgDataAck::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// -------------------------------------------------------------------

// IMMsgDataReadAck

// required uint32 user_id = 1;
inline bool IMMsgDataReadAck::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgDataReadAck::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgDataReadAck::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgDataReadAck::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMMsgDataReadAck::user_id() const {
  return user_id_;
}
inline void IMMsgDataReadAck::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 session_id = 2;
inline bool IMMsgDataReadAck::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgDataReadAck::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgDataReadAck::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgDataReadAck::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMMsgDataReadAck::session_id() const {
  return session_id_;
}
inline void IMMsgDataReadAck::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required uint32 msg_id = 3;
inline bool IMMsgDataReadAck::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgDataReadAck::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgDataReadAck::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgDataReadAck::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMMsgDataReadAck::msg_id() const {
  return msg_id_;
}
inline void IMMsgDataReadAck::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 4;
inline bool IMMsgDataReadAck::has_session_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgDataReadAck::set_has_session_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgDataReadAck::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgDataReadAck::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMMsgDataReadAck::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMMsgDataReadAck::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// -------------------------------------------------------------------

// IMMsgDataReadNotify

// required uint32 user_id = 1;
inline bool IMMsgDataReadNotify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgDataReadNotify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgDataReadNotify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgDataReadNotify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMMsgDataReadNotify::user_id() const {
  return user_id_;
}
inline void IMMsgDataReadNotify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 session_id = 2;
inline bool IMMsgDataReadNotify::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgDataReadNotify::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgDataReadNotify::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgDataReadNotify::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMMsgDataReadNotify::session_id() const {
  return session_id_;
}
inline void IMMsgDataReadNotify::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required uint32 msg_id = 3;
inline bool IMMsgDataReadNotify::has_msg_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgDataReadNotify::set_has_msg_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgDataReadNotify::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgDataReadNotify::clear_msg_id() {
  msg_id_ = 0u;
  clear_has_msg_id();
}
inline ::google::protobuf::uint32 IMMsgDataReadNotify::msg_id() const {
  return msg_id_;
}
inline void IMMsgDataReadNotify::set_msg_id(::google::protobuf::uint32 value) {
  set_has_msg_id();
  msg_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 4;
inline bool IMMsgDataReadNotify::has_session_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgDataReadNotify::set_has_session_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgDataReadNotify::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgDataReadNotify::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMMsgDataReadNotify::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMMsgDataReadNotify::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// -------------------------------------------------------------------

// IMClientTimeReq

// -------------------------------------------------------------------

// IMClientTimeRsp

// required uint32 server_time = 1;
inline bool IMClientTimeRsp::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMClientTimeRsp::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMClientTimeRsp::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMClientTimeRsp::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 IMClientTimeRsp::server_time() const {
  return server_time_;
}
inline void IMClientTimeRsp::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
}

// -------------------------------------------------------------------

// IMUnreadMsgCntReq

// required uint32 user_id = 1;
inline bool IMUnreadMsgCntReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUnreadMsgCntReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUnreadMsgCntReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUnreadMsgCntReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUnreadMsgCntReq::user_id() const {
  return user_id_;
}
inline void IMUnreadMsgCntReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bytes attach_data = 20;
inline bool IMUnreadMsgCntReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUnreadMsgCntReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUnreadMsgCntReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUnreadMsgCntReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUnreadMsgCntReq::attach_data() const {
  return *attach_data_;
}
inline void IMUnreadMsgCntReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMUnreadMsgCntReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMUnreadMsgCntReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMUnreadMsgCntReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMUnreadMsgCntReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IMUnreadMsgCntRsp

// required uint32 user_id = 1;
inline bool IMUnreadMsgCntRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUnreadMsgCntRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUnreadMsgCntRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUnreadMsgCntRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMUnreadMsgCntRsp::user_id() const {
  return user_id_;
}
inline void IMUnreadMsgCntRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 total_cnt = 2;
inline bool IMUnreadMsgCntRsp::has_total_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMUnreadMsgCntRsp::set_has_total_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMUnreadMsgCntRsp::clear_has_total_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMUnreadMsgCntRsp::clear_total_cnt() {
  total_cnt_ = 0u;
  clear_has_total_cnt();
}
inline ::google::protobuf::uint32 IMUnreadMsgCntRsp::total_cnt() const {
  return total_cnt_;
}
inline void IMUnreadMsgCntRsp::set_total_cnt(::google::protobuf::uint32 value) {
  set_has_total_cnt();
  total_cnt_ = value;
}

// repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
inline int IMUnreadMsgCntRsp::unreadinfo_list_size() const {
  return unreadinfo_list_.size();
}
inline void IMUnreadMsgCntRsp::clear_unreadinfo_list() {
  unreadinfo_list_.Clear();
}
inline const ::IM::BaseDefine::UnreadInfo& IMUnreadMsgCntRsp::unreadinfo_list(int index) const {
  return unreadinfo_list_.Get(index);
}
inline ::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::mutable_unreadinfo_list(int index) {
  return unreadinfo_list_.Mutable(index);
}
inline ::IM::BaseDefine::UnreadInfo* IMUnreadMsgCntRsp::add_unreadinfo_list() {
  return unreadinfo_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >&
IMUnreadMsgCntRsp::unreadinfo_list() const {
  return unreadinfo_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UnreadInfo >*
IMUnreadMsgCntRsp::mutable_unreadinfo_list() {
  return &unreadinfo_list_;
}

// optional bytes attach_data = 20;
inline bool IMUnreadMsgCntRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMUnreadMsgCntRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMUnreadMsgCntRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMUnreadMsgCntRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMUnreadMsgCntRsp::attach_data() const {
  return *attach_data_;
}
inline void IMUnreadMsgCntRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMUnreadMsgCntRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMUnreadMsgCntRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMUnreadMsgCntRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMUnreadMsgCntRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IMGetMsgListReq

// required uint32 user_id = 1;
inline bool IMGetMsgListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetMsgListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetMsgListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetMsgListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetMsgListReq::user_id() const {
  return user_id_;
}
inline void IMGetMsgListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMGetMsgListReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetMsgListReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetMsgListReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetMsgListReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMGetMsgListReq::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMGetMsgListReq::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// required uint32 session_id = 3;
inline bool IMGetMsgListReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetMsgListReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetMsgListReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetMsgListReq::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMGetMsgListReq::session_id() const {
  return session_id_;
}
inline void IMGetMsgListReq::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required uint32 msg_id_begin = 4;
inline bool IMGetMsgListReq::has_msg_id_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGetMsgListReq::set_has_msg_id_begin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGetMsgListReq::clear_has_msg_id_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGetMsgListReq::clear_msg_id_begin() {
  msg_id_begin_ = 0u;
  clear_has_msg_id_begin();
}
inline ::google::protobuf::uint32 IMGetMsgListReq::msg_id_begin() const {
  return msg_id_begin_;
}
inline void IMGetMsgListReq::set_msg_id_begin(::google::protobuf::uint32 value) {
  set_has_msg_id_begin();
  msg_id_begin_ = value;
}

// required uint32 msg_cnt = 5;
inline bool IMGetMsgListReq::has_msg_cnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGetMsgListReq::set_has_msg_cnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGetMsgListReq::clear_has_msg_cnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGetMsgListReq::clear_msg_cnt() {
  msg_cnt_ = 0u;
  clear_has_msg_cnt();
}
inline ::google::protobuf::uint32 IMGetMsgListReq::msg_cnt() const {
  return msg_cnt_;
}
inline void IMGetMsgListReq::set_msg_cnt(::google::protobuf::uint32 value) {
  set_has_msg_cnt();
  msg_cnt_ = value;
}

// optional bytes attach_data = 20;
inline bool IMGetMsgListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGetMsgListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGetMsgListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGetMsgListReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetMsgListReq::attach_data() const {
  return *attach_data_;
}
inline void IMGetMsgListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetMsgListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetMsgListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMGetMsgListReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMGetMsgListReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IMGetMsgListRsp

// required uint32 user_id = 1;
inline bool IMGetMsgListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetMsgListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetMsgListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetMsgListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetMsgListRsp::user_id() const {
  return user_id_;
}
inline void IMGetMsgListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMGetMsgListRsp::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetMsgListRsp::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetMsgListRsp::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetMsgListRsp::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMGetMsgListRsp::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMGetMsgListRsp::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// required uint32 session_id = 3;
inline bool IMGetMsgListRsp::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetMsgListRsp::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetMsgListRsp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetMsgListRsp::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMGetMsgListRsp::session_id() const {
  return session_id_;
}
inline void IMGetMsgListRsp::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required uint32 msg_id_begin = 4;
inline bool IMGetMsgListRsp::has_msg_id_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGetMsgListRsp::set_has_msg_id_begin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGetMsgListRsp::clear_has_msg_id_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGetMsgListRsp::clear_msg_id_begin() {
  msg_id_begin_ = 0u;
  clear_has_msg_id_begin();
}
inline ::google::protobuf::uint32 IMGetMsgListRsp::msg_id_begin() const {
  return msg_id_begin_;
}
inline void IMGetMsgListRsp::set_msg_id_begin(::google::protobuf::uint32 value) {
  set_has_msg_id_begin();
  msg_id_begin_ = value;
}

// repeated .IM.BaseDefine.MsgInfo msg_list = 5;
inline int IMGetMsgListRsp::msg_list_size() const {
  return msg_list_.size();
}
inline void IMGetMsgListRsp::clear_msg_list() {
  msg_list_.Clear();
}
inline const ::IM::BaseDefine::MsgInfo& IMGetMsgListRsp::msg_list(int index) const {
  return msg_list_.Get(index);
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::mutable_msg_list(int index) {
  return msg_list_.Mutable(index);
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgListRsp::add_msg_list() {
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
IMGetMsgListRsp::msg_list() const {
  return msg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
IMGetMsgListRsp::mutable_msg_list() {
  return &msg_list_;
}

// optional bytes attach_data = 20;
inline bool IMGetMsgListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMGetMsgListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMGetMsgListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMGetMsgListRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetMsgListRsp::attach_data() const {
  return *attach_data_;
}
inline void IMGetMsgListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetMsgListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetMsgListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMGetMsgListRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMGetMsgListRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IMGetLatestMsgIdReq

// required uint32 user_id = 1;
inline bool IMGetLatestMsgIdReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetLatestMsgIdReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetLatestMsgIdReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetLatestMsgIdReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetLatestMsgIdReq::user_id() const {
  return user_id_;
}
inline void IMGetLatestMsgIdReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMGetLatestMsgIdReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetLatestMsgIdReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetLatestMsgIdReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetLatestMsgIdReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMGetLatestMsgIdReq::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMGetLatestMsgIdReq::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// required uint32 session_id = 3;
inline bool IMGetLatestMsgIdReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetLatestMsgIdReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetLatestMsgIdReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetLatestMsgIdReq::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMGetLatestMsgIdReq::session_id() const {
  return session_id_;
}
inline void IMGetLatestMsgIdReq::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// optional bytes attach_data = 20;
inline bool IMGetLatestMsgIdReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGetLatestMsgIdReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGetLatestMsgIdReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGetLatestMsgIdReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetLatestMsgIdReq::attach_data() const {
  return *attach_data_;
}
inline void IMGetLatestMsgIdReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetLatestMsgIdReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetLatestMsgIdReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMGetLatestMsgIdReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMGetLatestMsgIdReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IMGetLatestMsgIdRsp

// required uint32 user_id = 1;
inline bool IMGetLatestMsgIdRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetLatestMsgIdRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetLatestMsgIdRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetLatestMsgIdRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetLatestMsgIdRsp::user_id() const {
  return user_id_;
}
inline void IMGetLatestMsgIdRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMGetLatestMsgIdRsp::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetLatestMsgIdRsp::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetLatestMsgIdRsp::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetLatestMsgIdRsp::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMGetLatestMsgIdRsp::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMGetLatestMsgIdRsp::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// required uint32 session_id = 3;
inline bool IMGetLatestMsgIdRsp::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetLatestMsgIdRsp::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetLatestMsgIdRsp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetLatestMsgIdRsp::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMGetLatestMsgIdRsp::session_id() const {
  return session_id_;
}
inline void IMGetLatestMsgIdRsp::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// required uint32 latest_msg_id = 4;
inline bool IMGetLatestMsgIdRsp::has_latest_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMGetLatestMsgIdRsp::set_has_latest_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMGetLatestMsgIdRsp::clear_has_latest_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMGetLatestMsgIdRsp::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
  clear_has_latest_msg_id();
}
inline ::google::protobuf::uint32 IMGetLatestMsgIdRsp::latest_msg_id() const {
  return latest_msg_id_;
}
inline void IMGetLatestMsgIdRsp::set_latest_msg_id(::google::protobuf::uint32 value) {
  set_has_latest_msg_id();
  latest_msg_id_ = value;
}

// optional bytes attach_data = 20;
inline bool IMGetLatestMsgIdRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGetLatestMsgIdRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGetLatestMsgIdRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGetLatestMsgIdRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetLatestMsgIdRsp::attach_data() const {
  return *attach_data_;
}
inline void IMGetLatestMsgIdRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetLatestMsgIdRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetLatestMsgIdRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMGetLatestMsgIdRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMGetLatestMsgIdRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IMGetMsgByIdReq

// required uint32 user_id = 1;
inline bool IMGetMsgByIdReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetMsgByIdReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetMsgByIdReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetMsgByIdReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetMsgByIdReq::user_id() const {
  return user_id_;
}
inline void IMGetMsgByIdReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMGetMsgByIdReq::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetMsgByIdReq::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetMsgByIdReq::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetMsgByIdReq::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMGetMsgByIdReq::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMGetMsgByIdReq::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// required uint32 session_id = 3;
inline bool IMGetMsgByIdReq::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetMsgByIdReq::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetMsgByIdReq::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetMsgByIdReq::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMGetMsgByIdReq::session_id() const {
  return session_id_;
}
inline void IMGetMsgByIdReq::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// repeated uint32 msg_id_list = 4;
inline int IMGetMsgByIdReq::msg_id_list_size() const {
  return msg_id_list_.size();
}
inline void IMGetMsgByIdReq::clear_msg_id_list() {
  msg_id_list_.Clear();
}
inline ::google::protobuf::uint32 IMGetMsgByIdReq::msg_id_list(int index) const {
  return msg_id_list_.Get(index);
}
inline void IMGetMsgByIdReq::set_msg_id_list(int index, ::google::protobuf::uint32 value) {
  msg_id_list_.Set(index, value);
}
inline void IMGetMsgByIdReq::add_msg_id_list(::google::protobuf::uint32 value) {
  msg_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGetMsgByIdReq::msg_id_list() const {
  return msg_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGetMsgByIdReq::mutable_msg_id_list() {
  return &msg_id_list_;
}

// optional bytes attach_data = 20;
inline bool IMGetMsgByIdReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGetMsgByIdReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGetMsgByIdReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGetMsgByIdReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetMsgByIdReq::attach_data() const {
  return *attach_data_;
}
inline void IMGetMsgByIdReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetMsgByIdReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetMsgByIdReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMGetMsgByIdReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMGetMsgByIdReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// IMGetMsgByIdRsp

// required uint32 user_id = 1;
inline bool IMGetMsgByIdRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMGetMsgByIdRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMGetMsgByIdRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMGetMsgByIdRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMGetMsgByIdRsp::user_id() const {
  return user_id_;
}
inline void IMGetMsgByIdRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .IM.BaseDefine.SessionType session_type = 2;
inline bool IMGetMsgByIdRsp::has_session_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMGetMsgByIdRsp::set_has_session_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMGetMsgByIdRsp::clear_has_session_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMGetMsgByIdRsp::clear_session_type() {
  session_type_ = 1;
  clear_has_session_type();
}
inline IM::BaseDefine::SessionType IMGetMsgByIdRsp::session_type() const {
  return static_cast< IM::BaseDefine::SessionType >(session_type_);
}
inline void IMGetMsgByIdRsp::set_session_type(IM::BaseDefine::SessionType value) {
  GOOGLE_DCHECK(IM::BaseDefine::SessionType_IsValid(value));
  set_has_session_type();
  session_type_ = value;
}

// required uint32 session_id = 3;
inline bool IMGetMsgByIdRsp::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMGetMsgByIdRsp::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMGetMsgByIdRsp::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMGetMsgByIdRsp::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
inline ::google::protobuf::uint32 IMGetMsgByIdRsp::session_id() const {
  return session_id_;
}
inline void IMGetMsgByIdRsp::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
}

// repeated .IM.BaseDefine.MsgInfo msg_list = 4;
inline int IMGetMsgByIdRsp::msg_list_size() const {
  return msg_list_.size();
}
inline void IMGetMsgByIdRsp::clear_msg_list() {
  msg_list_.Clear();
}
inline const ::IM::BaseDefine::MsgInfo& IMGetMsgByIdRsp::msg_list(int index) const {
  return msg_list_.Get(index);
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::mutable_msg_list(int index) {
  return msg_list_.Mutable(index);
}
inline ::IM::BaseDefine::MsgInfo* IMGetMsgByIdRsp::add_msg_list() {
  return msg_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >&
IMGetMsgByIdRsp::msg_list() const {
  return msg_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::MsgInfo >*
IMGetMsgByIdRsp::mutable_msg_list() {
  return &msg_list_;
}

// optional bytes attach_data = 20;
inline bool IMGetMsgByIdRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMGetMsgByIdRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMGetMsgByIdRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMGetMsgByIdRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::kEmptyString) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMGetMsgByIdRsp::attach_data() const {
  return *attach_data_;
}
inline void IMGetMsgByIdRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetMsgByIdRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
}
inline void IMGetMsgByIdRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMGetMsgByIdRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    attach_data_ = new ::std::string;
  }
  return attach_data_;
}
inline ::std::string* IMGetMsgByIdRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eMessage_2eproto__INCLUDED
