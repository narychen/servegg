// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Other.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Other {

void protobuf_ShutdownFile_IM_2eOther_2eproto() {
  delete IMHeartBeat::default_instance_;
}

void protobuf_AddDesc_IM_2eOther_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  IMHeartBeat::default_instance_ = new IMHeartBeat();
  IMHeartBeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eOther_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eOther_2eproto {
  StaticDescriptorInitializer_IM_2eOther_2eproto() {
    protobuf_AddDesc_IM_2eOther_2eproto();
  }
} static_descriptor_initializer_IM_2eOther_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

IMHeartBeat::IMHeartBeat()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void IMHeartBeat::InitAsDefaultInstance() {
}

IMHeartBeat::IMHeartBeat(const IMHeartBeat& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void IMHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMHeartBeat::~IMHeartBeat() {
  SharedDtor();
}

void IMHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IMHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMHeartBeat& IMHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eOther_2eproto();  return *default_instance_;
}

IMHeartBeat* IMHeartBeat::default_instance_ = NULL;

IMHeartBeat* IMHeartBeat::New() const {
  return new IMHeartBeat;
}

void IMHeartBeat::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool IMHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void IMHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int IMHeartBeat::ByteSize() const {
  int total_size = 0;
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMHeartBeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMHeartBeat*>(&from));
}

void IMHeartBeat::MergeFrom(const IMHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void IMHeartBeat::CopyFrom(const IMHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMHeartBeat::IsInitialized() const {
  
  return true;
}

void IMHeartBeat::Swap(IMHeartBeat* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMHeartBeat::GetTypeName() const {
  return "IM.Other.IMHeartBeat";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Other
}  // namespace IM

// @@protoc_insertion_point(global_scope)
