// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.SwitchService.proto

#ifndef PROTOBUF_IM_2eSwitchService_2eproto__INCLUDED
#define PROTOBUF_IM_2eSwitchService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace SwitchService {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eSwitchService_2eproto();
void protobuf_AssignDesc_IM_2eSwitchService_2eproto();
void protobuf_ShutdownFile_IM_2eSwitchService_2eproto();

class IMP2PCmdMsg;

// ===================================================================

class IMP2PCmdMsg : public ::google::protobuf::MessageLite {
 public:
  IMP2PCmdMsg();
  virtual ~IMP2PCmdMsg();
  
  IMP2PCmdMsg(const IMP2PCmdMsg& from);
  
  inline IMP2PCmdMsg& operator=(const IMP2PCmdMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const IMP2PCmdMsg& default_instance();
  
  void Swap(IMP2PCmdMsg* other);
  
  // implements Message ----------------------------------------------
  
  IMP2PCmdMsg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMP2PCmdMsg& from);
  void MergeFrom(const IMP2PCmdMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 from_user_id = 1;
  inline bool has_from_user_id() const;
  inline void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 from_user_id() const;
  inline void set_from_user_id(::google::protobuf::uint32 value);
  
  // required uint32 to_user_id = 2;
  inline bool has_to_user_id() const;
  inline void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_user_id() const;
  inline void set_to_user_id(::google::protobuf::uint32 value);
  
  // required string cmd_msg_data = 3;
  inline bool has_cmd_msg_data() const;
  inline void clear_cmd_msg_data();
  static const int kCmdMsgDataFieldNumber = 3;
  inline const ::std::string& cmd_msg_data() const;
  inline void set_cmd_msg_data(const ::std::string& value);
  inline void set_cmd_msg_data(const char* value);
  inline void set_cmd_msg_data(const char* value, size_t size);
  inline ::std::string* mutable_cmd_msg_data();
  inline ::std::string* release_cmd_msg_data();
  
  // @@protoc_insertion_point(class_scope:IM.SwitchService.IMP2PCmdMsg)
 private:
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_cmd_msg_data();
  inline void clear_has_cmd_msg_data();
  
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::std::string* cmd_msg_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_IM_2eSwitchService_2eproto();
  friend void protobuf_AssignDesc_IM_2eSwitchService_2eproto();
  friend void protobuf_ShutdownFile_IM_2eSwitchService_2eproto();
  
  void InitAsDefaultInstance();
  static IMP2PCmdMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// IMP2PCmdMsg

// required uint32 from_user_id = 1;
inline bool IMP2PCmdMsg::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMP2PCmdMsg::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMP2PCmdMsg::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMP2PCmdMsg::clear_from_user_id() {
  from_user_id_ = 0u;
  clear_has_from_user_id();
}
inline ::google::protobuf::uint32 IMP2PCmdMsg::from_user_id() const {
  return from_user_id_;
}
inline void IMP2PCmdMsg::set_from_user_id(::google::protobuf::uint32 value) {
  set_has_from_user_id();
  from_user_id_ = value;
}

// required uint32 to_user_id = 2;
inline bool IMP2PCmdMsg::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMP2PCmdMsg::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMP2PCmdMsg::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMP2PCmdMsg::clear_to_user_id() {
  to_user_id_ = 0u;
  clear_has_to_user_id();
}
inline ::google::protobuf::uint32 IMP2PCmdMsg::to_user_id() const {
  return to_user_id_;
}
inline void IMP2PCmdMsg::set_to_user_id(::google::protobuf::uint32 value) {
  set_has_to_user_id();
  to_user_id_ = value;
}

// required string cmd_msg_data = 3;
inline bool IMP2PCmdMsg::has_cmd_msg_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMP2PCmdMsg::set_has_cmd_msg_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMP2PCmdMsg::clear_has_cmd_msg_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMP2PCmdMsg::clear_cmd_msg_data() {
  if (cmd_msg_data_ != &::google::protobuf::internal::kEmptyString) {
    cmd_msg_data_->clear();
  }
  clear_has_cmd_msg_data();
}
inline const ::std::string& IMP2PCmdMsg::cmd_msg_data() const {
  return *cmd_msg_data_;
}
inline void IMP2PCmdMsg::set_cmd_msg_data(const ::std::string& value) {
  set_has_cmd_msg_data();
  if (cmd_msg_data_ == &::google::protobuf::internal::kEmptyString) {
    cmd_msg_data_ = new ::std::string;
  }
  cmd_msg_data_->assign(value);
}
inline void IMP2PCmdMsg::set_cmd_msg_data(const char* value) {
  set_has_cmd_msg_data();
  if (cmd_msg_data_ == &::google::protobuf::internal::kEmptyString) {
    cmd_msg_data_ = new ::std::string;
  }
  cmd_msg_data_->assign(value);
}
inline void IMP2PCmdMsg::set_cmd_msg_data(const char* value, size_t size) {
  set_has_cmd_msg_data();
  if (cmd_msg_data_ == &::google::protobuf::internal::kEmptyString) {
    cmd_msg_data_ = new ::std::string;
  }
  cmd_msg_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IMP2PCmdMsg::mutable_cmd_msg_data() {
  set_has_cmd_msg_data();
  if (cmd_msg_data_ == &::google::protobuf::internal::kEmptyString) {
    cmd_msg_data_ = new ::std::string;
  }
  return cmd_msg_data_;
}
inline ::std::string* IMP2PCmdMsg::release_cmd_msg_data() {
  clear_has_cmd_msg_data();
  if (cmd_msg_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_msg_data_;
    cmd_msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SwitchService
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eSwitchService_2eproto__INCLUDED
